Telegram Swipe Docs

ChatControllerImpl
ContextUI - ContextControllerExtractedPresentationNode - ControllerContentNode

standard(AccountContext.ChatControllerPresentationMode.StandardPresentation.previewing)

var dismissPreviewingImpl: (() -> Void)?
let source: ContextContentSource
if let location = location {
    source = .location(ChatListContextLocationContentSource(controller: strongSelf, location: location))
} else {
    let chatController = strongSelf.context.sharedContext.makeChatController(context: strongSelf.context, chatLocation: .peer(id: peer.peerId), subject: nil, botStart: nil, mode: .standard(.previewing), params: nil)
    chatController.customNavigationController = strongSelf.navigationController as? NavigationController
    chatController.canReadHistory.set(false)
    chatController.dismissPreviewing = {
        dismissPreviewingImpl?()
    }
    source = .controller(ContextControllerContentSourceImpl(controller: chatController, sourceNode: node, navigationController: strongSelf.navigationController as? NavigationController))
}

let contextController = ContextController(context: strongSelf.context, presentationData: strongSelf.presentationData, source: source, items: chatContextMenuItems(context: strongSelf.context, peerId: peer.peerId, promoInfo: promoInfo, source: .chatList(filter: strongSelf.chatListDisplayNode.mainContainerNode.currentItemNode.chatListFilter), chatListController: strongSelf, joined: joined) |> map { ContextController.Items(content: .list($0)) }, gesture: gesture)
strongSelf.presentInGlobalOverlay(contextController)